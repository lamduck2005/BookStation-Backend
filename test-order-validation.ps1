# üß™ Order Statistics API Validation Test Script
# Test t·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p validation limits v√† incomplete period handling

$baseUrl = "http://localhost:8080/api/orders/statistics/summary"
$headers = @{ "Content-Type" = "application/json" }

Write-Host "üî• Testing Order Statistics API Validation Limits..." -ForegroundColor Yellow
Write-Host "=================================================" -ForegroundColor Yellow

# Helper function ƒë·ªÉ t√≠nh timestamp
function Get-TimestampDaysAgo($days) {
    $date = (Get-Date).AddDays(-$days)
    return [Math]::Floor(($date - [datetime]"1970-01-01T00:00:00Z").TotalMilliseconds)
}

function Get-TimestampFromDate($dateStr) {
    $date = [datetime]::ParseExact($dateStr, "yyyy-MM-dd", $null)
    return [Math]::Floor(($date - [datetime]"1970-01-01T00:00:00Z").TotalMilliseconds)
}

# Test Daily Period Limits
Write-Host "`nüî∏ DAILY PERIOD VALIDATION:" -ForegroundColor Cyan

# Test case 1: Valid daily (30 ng√†y)
$from30Days = Get-TimestampDaysAgo 30
$toToday = Get-TimestampDaysAgo 0
$url = "$baseUrl?period=day&fromDate=$from30Days&toDate=$toToday"
Write-Host "‚úÖ Valid Daily (30 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 200) {
        Write-Host "SUCCESS - Got $($response.data.Count) records" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Status: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test case 2: Daily too long (100 ng√†y)
$from100Days = Get-TimestampDaysAgo 100
$url = "$baseUrl?period=day&fromDate=$from100Days&toDate=$toToday"
Write-Host "‚ùå Daily Too Long (100 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 400) {
        Write-Host "CORRECT VALIDATION - $($response.message)" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Should be 400 but got: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test Weekly Period Limits
Write-Host "`nüî∏ WEEKLY PERIOD VALIDATION:" -ForegroundColor Cyan

# Test case 3: Valid weekly (2 th√°ng = 60 ng√†y)
$from60Days = Get-TimestampDaysAgo 60
$url = "$baseUrl?period=week&fromDate=$from60Days&toDate=$toToday"
Write-Host "‚úÖ Valid Weekly (60 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 200) {
        Write-Host "SUCCESS - Got $($response.data.Count) records" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Status: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test case 4: Weekly too short (5 ng√†y)
$from5Days = Get-TimestampDaysAgo 5
$url = "$baseUrl?period=week&fromDate=$from5Days&toDate=$toToday"
Write-Host "‚ùå Weekly Too Short (5 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 400) {
        Write-Host "CORRECT VALIDATION - $($response.message)" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Should be 400 but got: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test case 5: Weekly too long (3 nƒÉm = 1095 ng√†y)
$from3Years = Get-TimestampDaysAgo 1095
$url = "$baseUrl?period=week&fromDate=$from3Years&toDate=$toToday"
Write-Host "‚ùå Weekly Too Long (3 years): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 400) {
        Write-Host "CORRECT VALIDATION - $($response.message)" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Should be 400 but got: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test Monthly Period Limits
Write-Host "`nüî∏ MONTHLY PERIOD VALIDATION:" -ForegroundColor Cyan

# Test case 6: Valid monthly (1 nƒÉm)
$from1Year = Get-TimestampDaysAgo 365
$url = "$baseUrl?period=month&fromDate=$from1Year&toDate=$toToday"
Write-Host "‚úÖ Valid Monthly (365 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 200) {
        Write-Host "SUCCESS - Got $($response.data.Count) records" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Status: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test case 7: Monthly too short (20 ng√†y)
$from20Days = Get-TimestampDaysAgo 20
$url = "$baseUrl?period=month&fromDate=$from20Days&toDate=$toToday"
Write-Host "‚ùå Monthly Too Short (20 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 400) {
        Write-Host "CORRECT VALIDATION - $($response.message)" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Should be 400 but got: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test Quarterly Period Limits
Write-Host "`nüî∏ QUARTERLY PERIOD VALIDATION:" -ForegroundColor Cyan

# Test case 8: Valid quarterly (2 nƒÉm)
$from2Years = Get-TimestampDaysAgo 730
$url = "$baseUrl?period=quarter&fromDate=$from2Years&toDate=$toToday"
Write-Host "‚úÖ Valid Quarterly (730 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 200) {
        Write-Host "SUCCESS - Got $($response.data.Count) records" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Status: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test case 9: Quarterly too short (60 ng√†y)
$url = "$baseUrl?period=quarter&fromDate=$from60Days&toDate=$toToday"
Write-Host "‚ùå Quarterly Too Short (60 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 400) {
        Write-Host "CORRECT VALIDATION - $($response.message)" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Should be 400 but got: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test Yearly Period Limits  
Write-Host "`nüî∏ YEARLY PERIOD VALIDATION:" -ForegroundColor Cyan

# Test case 10: Valid yearly (3 nƒÉm)
$url = "$baseUrl?period=year&fromDate=$from3Years&toDate=$toToday"
Write-Host "‚úÖ Valid Yearly (3 years): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 200) {
        Write-Host "SUCCESS - Got $($response.data.Count) records" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Status: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test case 11: Yearly too short (200 ng√†y)
$from200Days = Get-TimestampDaysAgo 200
$url = "$baseUrl?period=year&fromDate=$from200Days&toDate=$toToday"
Write-Host "‚ùå Yearly Too Short (200 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 400) {
        Write-Host "CORRECT VALIDATION - $($response.message)" -ForegroundColor Green
    } else {
        Write-Host "FAILED - Should be 400 but got: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test Incomplete Period Handling
Write-Host "`nüî∏ INCOMPLETE PERIOD HANDLING:" -ForegroundColor Cyan

# Test case 12: Weekly v·ªõi ch·ªâ 10 ng√†y (s·∫Ω ch·∫•p nh·∫≠n v√¨ >= 7 ng√†y, nh∆∞ng endDate s·∫Ω reflect ƒë√∫ng range)
$from10Days = Get-TimestampDaysAgo 10
$url = "$baseUrl?period=week&fromDate=$from10Days&toDate=$toToday"
Write-Host "‚ö†Ô∏è  Weekly Incomplete (10 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 200) {
        $firstRecord = $response.data[0]
        $endDate = $firstRecord.endDate
        $startDate = $firstRecord.startDate
        Write-Host "SUCCESS - startDate: $startDate, endDate: $endDate" -ForegroundColor Green
        if ($firstRecord.dateRange) {
            Write-Host "          dateRange: $($firstRecord.dateRange)" -ForegroundColor Yellow
        }
    } else {
        Write-Host "FAILED - Status: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

# Test case 13: Monthly v·ªõi 35 ng√†y (s·∫Ω ch·∫•p nh·∫≠n v√¨ >= 28 ng√†y)
$from35Days = Get-TimestampDaysAgo 35
$url = "$baseUrl?period=month&fromDate=$from35Days&toDate=$toToday"
Write-Host "‚ö†Ô∏è  Monthly Incomplete (35 days): " -NoNewline
try {
    $response = Invoke-RestMethod -Uri $url -Method GET -Headers $headers
    if ($response.status -eq 200) {
        $firstRecord = $response.data[0]
        $endDate = $firstRecord.endDate
        $startDate = $firstRecord.startDate
        Write-Host "SUCCESS - startDate: $startDate, endDate: $endDate" -ForegroundColor Green
        if ($firstRecord.dateRange) {
            Write-Host "          dateRange: $($firstRecord.dateRange)" -ForegroundColor Yellow
        }
    } else {
        Write-Host "FAILED - Status: $($response.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "ERROR - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüî• Validation Testing Complete!" -ForegroundColor Yellow
Write-Host "=================================================" -ForegroundColor Yellow
