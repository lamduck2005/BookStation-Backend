package org.datn.bookstation.service.impl;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.datn.bookstation.dto.request.OrderStatusTransitionRequest;
import org.datn.bookstation.dto.response.ApiResponse;
import org.datn.bookstation.dto.response.OrderStatusTransitionResponse;
import org.datn.bookstation.entity.*;
import org.datn.bookstation.entity.enums.OrderStatus;
import org.datn.bookstation.repository.*;
import org.datn.bookstation.service.OrderStatusTransitionService;
import org.datn.bookstation.service.PointManagementService;
import org.datn.bookstation.service.VoucherManagementService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

/**
 * Implementation c·ªßa OrderStatusTransitionService
 * X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng v·ªõi ƒë·∫ßy ƒë·ªß business logic
 */
@Service
@AllArgsConstructor
@Slf4j
@Transactional
public class OrderStatusTransitionServiceImpl implements OrderStatusTransitionService {
    
    private final OrderRepository orderRepository;
    private final OrderDetailRepository orderDetailRepository;
    private final FlashSaleItemRepository flashSaleItemRepository;
    private final BookRepository bookRepository;
    private final RefundItemRepository refundItemRepository;
    private final RefundRequestRepository refundRequestRepository;
    private final PointManagementService pointManagementService;
    private final VoucherManagementService voucherManagementService;
    
    // ƒê·ªãnh nghƒ©a c√°c lu·ªìng chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i h·ª£p l·ªá
    private static final Map<OrderStatus, Set<OrderStatus>> VALID_TRANSITIONS = Map.of(
        OrderStatus.PENDING, Set.of(OrderStatus.CONFIRMED, OrderStatus.CANCELED),
        OrderStatus.CONFIRMED, Set.of(OrderStatus.SHIPPED, OrderStatus.CANCELED),
        OrderStatus.SHIPPED, Set.of(OrderStatus.DELIVERED, OrderStatus.CANCELED),
        OrderStatus.DELIVERED, Set.of(OrderStatus.GOODS_RECEIVED_FROM_CUSTOMER, OrderStatus.PARTIALLY_REFUNDED),
        OrderStatus.CANCELED, Set.of(OrderStatus.REFUNDING),
        OrderStatus.GOODS_RECEIVED_FROM_CUSTOMER, Set.of(OrderStatus.GOODS_RETURNED_TO_WAREHOUSE, OrderStatus.REFUNDING),
        OrderStatus.GOODS_RETURNED_TO_WAREHOUSE, Set.of(OrderStatus.REFUNDING),
        OrderStatus.REFUNDING, Set.of(OrderStatus.GOODS_RETURNED_TO_WAREHOUSE, OrderStatus.REFUNDED, OrderStatus.GOODS_RECEIVED_FROM_CUSTOMER),
        OrderStatus.PARTIALLY_REFUNDED, Set.of(OrderStatus.GOODS_RECEIVED_FROM_CUSTOMER, OrderStatus.REFUNDING),
        OrderStatus.REFUNDED, Set.of(OrderStatus.GOODS_RETURNED_TO_WAREHOUSE) // ‚úÖ CHO PH√âP T·ª™ REFUNDED V·ªÄ WAREHOUSE
    );
    
    
    @Override
    @Transactional
    public ApiResponse<OrderStatusTransitionResponse> transitionOrderStatus(OrderStatusTransitionRequest request) {
        try {
            // 1. VALIDATION C∆† B·∫¢N
            Order order = orderRepository.findById(request.getOrderId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + request.getOrderId()));
            
            // ‚úÖ S·ª¨A: T·ª± ƒë·ªông s·ª≠ d·ª•ng tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa order thay v√¨ d·ª±a v√†o request
            OrderStatus actualCurrentStatus = order.getOrderStatus();
            
            // Optional: Log ƒë·ªÉ debug
            log.info("üîç DEBUG: Order {} - Current status: {}, Request wants to change to: {}", 
                     order.getId(), actualCurrentStatus, request.getNewStatus());
            
            // N·∫øu c√≥ currentStatus trong request, ki·ªÉm tra c√≥ kh·ªõp kh√¥ng (optional validation)
            if (request.getCurrentStatus() != null && !actualCurrentStatus.equals(request.getCurrentStatus())) {
                log.warn("‚ö†Ô∏è  WARNING: Request currentStatus ({}) kh√°c v·ªõi actual status ({})", 
                         request.getCurrentStatus(), actualCurrentStatus);
            }
            
            // 2. VALIDATION LU·ªíNG CHUY·ªÇN ƒê·ªîI (d√πng actual status)
            if (!isValidTransition(actualCurrentStatus, request.getNewStatus())) {
                return new ApiResponse<>(400, 
                    "Kh√¥ng th·ªÉ chuy·ªÉn t·ª´ " + actualCurrentStatus + " sang " + request.getNewStatus(), null);
            }
            
            // 3. VALIDATION NGHI·ªÜP V·ª§ ƒê·∫∂C BI·ªÜT
            String validationError = validateSpecialBusinessRules(order, request);
            if (validationError != null) {
                return new ApiResponse<>(400, validationError, null);
            }
            
            // 4. TH·ª∞C HI·ªÜN CHUY·ªÇN ƒê·ªîI
            OrderStatusTransitionResponse.BusinessImpactSummary businessImpact = 
                executeStatusTransition(order, request);
            
            // 5. C·∫¨P NH·∫¨T DATABASE
            order.setOrderStatus(request.getNewStatus());
            order.setUpdatedBy(request.getPerformedBy());
            order.setUpdatedAt(System.currentTimeMillis());
            orderRepository.save(order);
            
            // 6. T·∫†O RESPONSE
            OrderStatusTransitionResponse response = OrderStatusTransitionResponse.builder()
                .orderId(order.getId())
                .orderCode(order.getCode())
                .previousStatus(actualCurrentStatus)  // ‚úÖ D√πng actual status
                .newStatus(request.getNewStatus())
                .transitionMessage(getTransitionDescription(actualCurrentStatus, request.getNewStatus()))
                .transitionTime(System.currentTimeMillis())
                .businessImpact(businessImpact)
                .build();
            
            log.info("‚úÖ Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng {} t·ª´ {} sang {} th√†nh c√¥ng", 
                    order.getCode(), actualCurrentStatus, request.getNewStatus());
            
            return new ApiResponse<>(200, "Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng", response);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng: {}", e.getMessage(), e);
            return new ApiResponse<>(500, "L·ªói h·ªá th·ªëng: " + e.getMessage(), null);
        }
    }
    
    @Override
    public boolean isValidTransition(OrderStatus currentStatus, OrderStatus newStatus) {
        Set<OrderStatus> validNextStatuses = VALID_TRANSITIONS.get(currentStatus);
        return validNextStatuses != null && validNextStatuses.contains(newStatus);
    }
    
    @Override
    public List<OrderStatus> getValidNextStatuses(OrderStatus currentStatus) {
        Set<OrderStatus> validStatuses = VALID_TRANSITIONS.get(currentStatus);
        return validStatuses != null ? new ArrayList<>(validStatuses) : Collections.emptyList();
    }
    
    @Override
    public String getTransitionDescription(OrderStatus currentStatus, OrderStatus newStatus) {
        String key = currentStatus + "_TO_" + newStatus;
        
        Map<String, String> descriptions = new HashMap<>();
        descriptions.put("PENDING_TO_CONFIRMED", "X√°c nh·∫≠n ƒë∆°n h√†ng - ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c duy·ªát v√† s·∫µn s√†ng x·ª≠ l√Ω");
        descriptions.put("PENDING_TO_CANCELED", "H·ªßy ƒë∆°n h√†ng - ƒê∆°n h√†ng b·ªã h·ªßy khi ƒëang ch·ªù x·ª≠ l√Ω");
        descriptions.put("CONFIRMED_TO_SHIPPED", "Giao h√†ng - ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√≥ng g√≥i v√† b√†n giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn");
        descriptions.put("CONFIRMED_TO_CANCELED", "H·ªßy ƒë∆°n h√†ng - ƒê∆°n h√†ng b·ªã h·ªßy sau khi ƒë√£ x√°c nh·∫≠n");
        descriptions.put("SHIPPED_TO_DELIVERED", "Giao th√†nh c√¥ng - Kh√°ch h√†ng ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√†ng");
        descriptions.put("SHIPPED_TO_CANCELED", "H·ªßy ƒë∆°n h√†ng - ƒê∆°n h√†ng b·ªã h·ªßy trong qu√° tr√¨nh giao");
        descriptions.put("DELIVERED_TO_GOODS_RECEIVED_FROM_CUSTOMER", "Nh·∫≠n h√†ng ho√†n tr·∫£ t·ª´ kh√°ch - Kh√°ch ƒë√£ tr·∫£ h√†ng, sold count ƒë∆∞·ª£c tr·ª´");
        descriptions.put("DELIVERED_TO_PARTIALLY_REFUNDED", "Ho√†n ti·ªÅn m·ªôt ph·∫ßn - Ho√†n ti·ªÅn cho m·ªôt s·ªë s·∫£n ph·∫©m trong ƒë∆°n h√†ng");
        descriptions.put("GOODS_RECEIVED_FROM_CUSTOMER_TO_GOODS_RETURNED_TO_WAREHOUSE", "Nh·∫≠p h√†ng v·ªÅ kho - H√†ng ƒë√£ nh·∫≠n ƒë∆∞·ª£c nh·∫≠p v√†o kho");
        descriptions.put("GOODS_RECEIVED_FROM_CUSTOMER_TO_REFUNDING", "B·∫Øt ƒë·∫ßu ho√†n ti·ªÅn - Ti·∫øn h√†nh ho√†n ti·ªÅn sau khi nh·∫≠n h√†ng");
        descriptions.put("CANCELED_TO_REFUNDING", "B·∫Øt ƒë·∫ßu ho√†n ti·ªÅn - Ti·∫øn h√†nh ho√†n ti·ªÅn cho ƒë∆°n h√†ng ƒë√£ h·ªßy");
        descriptions.put("GOODS_RETURNED_TO_WAREHOUSE_TO_REFUNDING", "B·∫Øt ƒë·∫ßu ho√†n ti·ªÅn - Ti·∫øn h√†nh ho√†n ti·ªÅn cho ƒë∆°n h√†ng ƒë√£ nh·∫≠p kho");
        descriptions.put("REFUNDING_TO_REFUNDED", "Ho√†n ti·ªÅn th√†nh c√¥ng - ƒê√£ ho√†n ti·ªÅn cho kh√°ch h√†ng");
        descriptions.put("REFUNDING_TO_GOODS_RETURNED_TO_WAREHOUSE", "Nh·∫≠n h√†ng v·ªÅ kho - H√†ng ho√†n tr·∫£ ƒë√£ ƒë∆∞·ª£c nh·∫≠p kho");
        descriptions.put("REFUNDED_TO_GOODS_RETURNED_TO_WAREHOUSE", "Nh·∫≠n h√†ng v·ªÅ kho sau ho√†n ti·ªÅn - H√†ng ƒë∆∞·ª£c tr·∫£ l·∫°i sau khi ƒë√£ ho√†n ti·ªÅn");
        descriptions.put("PARTIALLY_REFUNDED_TO_GOODS_RECEIVED_FROM_CUSTOMER", "Nh·∫≠n h√†ng ho√†n tr·∫£ t·ª´ kh√°ch - Nh·∫≠n ph·∫ßn h√†ng c√≤n l·∫°i t·ª´ kh√°ch");
        descriptions.put("PARTIALLY_REFUNDED_TO_REFUNDING", "Ho√†n ti·ªÅn to√†n b·ªô - Ti·∫øn h√†nh ho√†n ti·ªÅn cho to√†n b·ªô ƒë∆°n h√†ng");
        
        return descriptions.getOrDefault(key, "Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i t·ª´ " + currentStatus + " sang " + newStatus);
    }
    
    /**
     * Validation c√°c quy t·∫Øc nghi·ªáp v·ª• ƒë·∫∑c bi·ªát
     */
    private String validateSpecialBusinessRules(Order order, OrderStatusTransitionRequest request) {
        // Ki·ªÉm tra lo·∫°i ƒë∆°n h√†ng
        if (!isValidOrderType(order.getOrderType())) {
            return "Lo·∫°i ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá. Ch·ªâ cho ph√©p 'ONLINE' ho·∫∑c 'COUNTER'";
        }
        
        // Ki·ªÉm tra quy·ªÅn th·ª±c hi·ªán
        if (request.getNewStatus() == OrderStatus.CONFIRMED && order.getOrderType().equals("COUNTER")) {
            // ƒê∆°n t·∫°i qu·∫ßy ph·∫£i c√≥ staff x√°c nh·∫≠n
            if (request.getStaffId() == null) {
                return "ƒê∆°n h√†ng t·∫°i qu·∫ßy ph·∫£i c√≥ nh√¢n vi√™n x√°c nh·∫≠n";
            }
        }
        
        // ƒê√£ b·ªè y√™u c·∫ßu m√£ v·∫≠n ƒë∆°n khi chuy·ªÉn tr·∫°ng th√°i sang SHIPPED cho ƒë∆°n h√†ng online
        
        return null; // Kh√¥ng c√≥ l·ªói
    }
    
    /**
     * Ki·ªÉm tra lo·∫°i ƒë∆°n h√†ng c√≥ h·ª£p l·ªá hay kh√¥ng
     */
    private boolean isValidOrderType(String orderType) {
        return "ONLINE".equals(orderType) || "COUNTER".equals(orderType);
    }
    
    /**
     * Th·ª±c hi·ªán c√°c t√°c ƒë·ªông nghi·ªáp v·ª• khi chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i
     */
    private OrderStatusTransitionResponse.BusinessImpactSummary executeStatusTransition(
            Order order, OrderStatusTransitionRequest request) {
        
        OrderStatusTransitionResponse.BusinessImpactSummary.BusinessImpactSummaryBuilder impactBuilder = 
            OrderStatusTransitionResponse.BusinessImpactSummary.builder();
        
        User user = order.getUser();
        OrderStatus newStatus = request.getNewStatus();
        
        // X·ª¨ L√ù ƒêI·ªÇM T√çCH L≈®Y
        OrderStatusTransitionResponse.BusinessImpactSummary.PointImpact pointImpact = 
            handlePointImpact(order, user, newStatus);
        impactBuilder.pointImpact(pointImpact);
        
        // X·ª¨ L√ù KHO H√ÄNG
        OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact stockImpact = 
            handleStockImpact(order, newStatus);
        impactBuilder.stockImpact(stockImpact);
        
        // X·ª¨ L√ù VOUCHER
        OrderStatusTransitionResponse.BusinessImpactSummary.VoucherImpact voucherImpact = 
            handleVoucherImpact(order, newStatus);
        impactBuilder.voucherImpact(voucherImpact);
        
        return impactBuilder.build();
    }
    
    /**
     * X·ª≠ l√Ω t√°c ƒë·ªông l√™n ƒëi·ªÉm t√≠ch l≈©y
     */
    private OrderStatusTransitionResponse.BusinessImpactSummary.PointImpact handlePointImpact(
            Order order, User user, OrderStatus newStatus) {
        
        OrderStatusTransitionResponse.BusinessImpactSummary.PointImpact.PointImpactBuilder builder = 
            OrderStatusTransitionResponse.BusinessImpactSummary.PointImpact.builder();
        
        try {
            switch (newStatus) {
                case DELIVERED:
                    // T√≠ch ƒëi·ªÉm khi giao th√†nh c√¥ng
                    pointManagementService.earnPointsFromOrder(order, user);
                    int earnedPoints = pointManagementService.calculateEarnedPoints(order.getTotalAmount(), user);
                    builder.pointsEarned(earnedPoints)
                           .description("T√≠ch " + earnedPoints + " ƒëi·ªÉm t·ª´ ƒë∆°n h√†ng " + order.getCode());
                    break;
                    
                case CANCELED:
                case GOODS_RECEIVED_FROM_CUSTOMER:
                    // Tr·ª´ ƒëi·ªÉm khi h·ªßy/nh·∫≠n h√†ng ho√†n tr·∫£ (n·∫øu ƒë√£ t√≠ch ƒëi·ªÉm tr∆∞·ªõc ƒë√≥)
                    pointManagementService.deductPointsFromCancelledOrder(order, user);
                    int earnedPointsBefore = pointManagementService.calculateEarnedPoints(order.getTotalAmount(), user);
                    builder.pointsDeducted(earnedPointsBefore)
                           .description("Tr·ª´ " + earnedPointsBefore + " ƒëi·ªÉm do h·ªßy/tr·∫£ ƒë∆°n h√†ng " + order.getCode());
                    break;
                    
                default:
                    builder.pointsEarned(0)
                           .pointsDeducted(0)
                           .description("Kh√¥ng c√≥ thay ƒë·ªïi ƒëi·ªÉm t√≠ch l≈©y");
            }
        } catch (Exception e) {
            log.error("L·ªói x·ª≠ l√Ω ƒëi·ªÉm t√≠ch l≈©y: {}", e.getMessage(), e);
            builder.pointsEarned(0).pointsDeducted(0).description("L·ªói x·ª≠ l√Ω ƒëi·ªÉm t√≠ch l≈©y");
        }
        
        return builder.build();
    }
    
    /**
     * X·ª≠ l√Ω t√°c ƒë·ªông l√™n kho h√†ng
     */
    private OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact handleStockImpact(
            Order order, OrderStatus newStatus) {
        
        List<OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact.StockAdjustment> adjustments = 
            new ArrayList<>();
        
        try {
            List<OrderDetail> orderDetails = orderDetailRepository.findByOrderId(order.getId());
            
            for (OrderDetail detail : orderDetails) {
                Book book = detail.getBook();
                Integer quantity = detail.getQuantity();
                
                switch (newStatus) {
                    case CONFIRMED:
                        // ƒê·∫∑t tr∆∞·ªõc h√†ng trong kho
                        adjustments.add(OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact.StockAdjustment.builder()
                            .bookId(book.getId())
                            .bookTitle(book.getBookName())
                            .quantityAdjusted(quantity)
                            .adjustmentType("RESERVED")
                            .build());
                        break;
                        
                    case DELIVERED:
                        // ‚úÖ C·ªòNG SOLD COUNT KHI GIAO TH√ÄNH C√îNG
                        if (detail.getFlashSaleItem() != null) {
                            // Flash sale item
                            FlashSaleItem flashSaleItem = detail.getFlashSaleItem();
                            flashSaleItem.setSoldCount(flashSaleItem.getSoldCount() + quantity);
                            flashSaleItemRepository.save(flashSaleItem);
                            
                            // ‚úÖ C·ªòNG SOLD COUNT CHO BOOK G·ªêC LU√îN
                            book.setSoldCount(book.getSoldCount() + quantity);
                            bookRepository.save(book);
                        } else {
                            // ‚úÖ S·ª¨A L·ªñI: C·ªông sold count cho book th√¥ng th∆∞·ªùng
                            book.setSoldCount(book.getSoldCount() + quantity);
                            bookRepository.save(book);
                        }
                        adjustments.add(OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact.StockAdjustment.builder()
                            .bookId(book.getId())
                            .bookTitle(book.getBookName())
                            .quantityAdjusted(quantity)
                            .adjustmentType("SOLD_COUNT_INCREASED")
                            .build());
                        break;
                        
                    case CANCELED:
                        // ‚ùå KH√îNG c·ªông stock khi h·ªßy ƒë∆°n - ch·ªâ khi ƒë√£ shipped
                        if (order.getOrderStatus() == OrderStatus.SHIPPED || order.getOrderStatus() == OrderStatus.CONFIRMED) {
                            // Kh√¥i ph·ª•c stock v√¨ h√†ng ch∆∞a giao
                            if (detail.getFlashSaleItem() != null) {
                                FlashSaleItem flashSaleItem = detail.getFlashSaleItem();
                                flashSaleItem.setStockQuantity(flashSaleItem.getStockQuantity() + quantity);
                                flashSaleItemRepository.save(flashSaleItem);
                            } else {
                                book.setStockQuantity(book.getStockQuantity() + quantity);
                                bookRepository.save(book);
                            }
                            adjustments.add(OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact.StockAdjustment.builder()
                                .bookId(book.getId())
                                .bookTitle(book.getBookName())
                                .quantityAdjusted(quantity)
                                .adjustmentType("STOCK_RESTORED")
                                .build());
                        }
                        break;
                        
                    case GOODS_RECEIVED_FROM_CUSTOMER:
                        // ‚úÖ TR·ª™ SOLD COUNT KHI NH·∫¨N H√ÄNG HO√ÄN TR·∫¢ T·ª™ KH√ÅCH
                        Integer actualRefundQuantity = getActualRefundQuantity(order, book.getId());
                        
                        if (actualRefundQuantity > 0) {
                            if (detail.getFlashSaleItem() != null) {
                                FlashSaleItem flashSaleItem = detail.getFlashSaleItem();
                                // ‚úÖ TR·ª™ SOLD COUNT CHO FLASH SALE ITEM
                                flashSaleItem.setSoldCount(Math.max(0, flashSaleItem.getSoldCount() - actualRefundQuantity));
                                flashSaleItemRepository.save(flashSaleItem);
                                
                                // ‚úÖ TR·ª™ SOLD COUNT CHO BOOK G·ªêC
                                book.setSoldCount(Math.max(0, book.getSoldCount() - actualRefundQuantity));
                                bookRepository.save(book);
                            } else {
                                // ‚úÖ TR·ª™ SOLD COUNT CHO BOOK TH√îNG TH∆Ø·ªúNG
                                book.setSoldCount(Math.max(0, book.getSoldCount() - actualRefundQuantity));
                                bookRepository.save(book);
                            }
                            adjustments.add(OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact.StockAdjustment.builder()
                                .bookId(book.getId())
                                .bookTitle(book.getBookName())
                                .quantityAdjusted(actualRefundQuantity)
                                .adjustmentType("SOLD_COUNT_REDUCED")
                                .build());
                            log.info("‚úÖ Reduced sold count for book {}: {} units (goods received from customer)", 
                                     book.getId(), actualRefundQuantity);
                        }
                        break;
                        
                    case GOODS_RETURNED_TO_WAREHOUSE:
                        // ‚úÖ CH·ªà C·ªòNG L·∫†I STOCK (kh√¥ng tr·ª´ sold count n·ªØa v√¨ ƒë√£ tr·ª´ ·ªü GOODS_RECEIVED_FROM_CUSTOMER)
                        Integer warehouseRefundQuantity = getActualRefundQuantity(order, book.getId());
                        
                        if (warehouseRefundQuantity > 0) {
                            if (detail.getFlashSaleItem() != null) {
                                // ‚úÖ Flash sale: C·ªòNG STOCK CHO C·∫¢ FLASH SALE ITEM V√Ä BOOK G·ªêC
                                FlashSaleItem flashSaleItem = detail.getFlashSaleItem();
                                flashSaleItem.setStockQuantity(flashSaleItem.getStockQuantity() + warehouseRefundQuantity);
                                flashSaleItemRepository.save(flashSaleItem);
                                
                                // ‚úÖ C·ªòNG STOCK CHO BOOK G·ªêC LU√îN
                                book.setStockQuantity(book.getStockQuantity() + warehouseRefundQuantity);
                                bookRepository.save(book);
                                
                                log.info("‚úÖ Restored stock for flash sale item {}: {} units and book {}: {} units", 
                                         flashSaleItem.getId(), warehouseRefundQuantity, book.getId(), warehouseRefundQuantity);
                            } else {
                                // ‚úÖ Book th∆∞·ªùng: CH·ªà C·ªòNG STOCK CHO BOOK
                                book.setStockQuantity(book.getStockQuantity() + warehouseRefundQuantity);
                                bookRepository.save(book);
                                
                                log.info("‚úÖ Restored stock for book {}: {} units (regular book)", 
                                         book.getId(), warehouseRefundQuantity);
                            }
                            adjustments.add(OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact.StockAdjustment.builder()
                                .bookId(book.getId())
                                .bookTitle(book.getBookName())
                                .quantityAdjusted(warehouseRefundQuantity)
                                .adjustmentType("STOCK_RETURNED_TO_WAREHOUSE")
                                .build());
                        }
                        break;
                    
                    default:
                        // Kh√¥ng c√≥ thay ƒë·ªïi kho h√†ng cho c√°c tr·∫°ng th√°i kh√°c
                        break;
                }
            }
        } catch (Exception e) {
            log.error("L·ªói x·ª≠ l√Ω kho h√†ng: {}", e.getMessage(), e);
        }
        
        return OrderStatusTransitionResponse.BusinessImpactSummary.StockImpact.builder()
            .adjustments(adjustments)
            .build();
    }
    
    /**
     * X·ª≠ l√Ω t√°c ƒë·ªông l√™n voucher
     */
    private OrderStatusTransitionResponse.BusinessImpactSummary.VoucherImpact handleVoucherImpact(
            Order order, OrderStatus newStatus) {
        
        OrderStatusTransitionResponse.BusinessImpactSummary.VoucherImpact.VoucherImpactBuilder builder = 
            OrderStatusTransitionResponse.BusinessImpactSummary.VoucherImpact.builder();
        
        try {
            switch (newStatus) {
                case CANCELED:
                    // Kh√¥ng ho√†n voucher khi h·ªßy ƒë∆°n (theo y√™u c·∫ßu)
                    voucherManagementService.refundVouchersFromCancelledOrder(order);
                    builder.vouchersUsed(0)
                           .vouchersRefunded(0)
                           .totalDiscountImpacted(order.getDiscountAmount())
                           .description("ƒê∆°n h√†ng ƒë√£ h·ªßy - voucher KH√îNG ƒë∆∞·ª£c ho√†n l·∫°i");
                    break;
                    
                case GOODS_RECEIVED_FROM_CUSTOMER:
                case GOODS_RETURNED_TO_WAREHOUSE:
                case REFUNDED:
                    // Ho√†n voucher khi tr·∫£ h√†ng
                    voucherManagementService.refundVouchersFromReturnedOrder(order);
                    builder.vouchersUsed(0)
                           .vouchersRefunded(order.getRegularVoucherCount() + order.getShippingVoucherCount())
                           .totalDiscountImpacted(order.getDiscountAmount().add(order.getDiscountShipping()))
                           .description("ƒê√£ ho√†n l·∫°i voucher do tr·∫£ h√†ng");
                    break;
                    
                default:
                    builder.vouchersUsed(0)
                           .vouchersRefunded(0)
                           .totalDiscountImpacted(java.math.BigDecimal.ZERO)
                           .description("Kh√¥ng c√≥ thay ƒë·ªïi voucher");
            }
        } catch (Exception e) {
            log.error("L·ªói x·ª≠ l√Ω voucher: {}", e.getMessage(), e);
            builder.vouchersUsed(0).vouchersRefunded(0)
                   .totalDiscountImpacted(java.math.BigDecimal.ZERO)
                   .description("L·ªói x·ª≠ l√Ω voucher");
        }
        
        return builder.build();
    }
    
    /**
     * ‚úÖ L·∫•y s·ªë l∆∞·ª£ng th·ª±c t·∫ø ƒë√£ ho√†n h√†ng c·ªßa m·ªôt s·∫£n ph·∫©m trong ƒë∆°n h√†ng
     * H·ªó tr·ª£ c·∫£ ho√†n m·ªôt ph·∫ßn (qua RefundRequest) v√† ho√†n to√†n ph·∫ßn (tr·ª±c ti·∫øp chuy·ªÉn tr·∫°ng th√°i)
     */
    private Integer getActualRefundQuantity(Order order, Integer bookId) {
        try {
            // CASE 1: Ho√†n m·ªôt ph·∫ßn - c√≥ RefundRequest v·ªõi status COMPLETED
            List<RefundRequest> completedRefunds = refundRequestRepository.findByOrderIdOrderByCreatedAtDesc(order.getId())
                    .stream()
                    .filter(refund -> refund.getStatus() == RefundRequest.RefundStatus.COMPLETED)
                    .toList();
            
            int partialRefundQuantity = 0;
            
            // T√≠nh t·ªïng s·ªë l∆∞·ª£ng ƒë√£ ho√†n m·ªôt ph·∫ßn c·ªßa s·∫£n ph·∫©m n√†y
            for (RefundRequest refund : completedRefunds) {
                List<RefundItem> refundItems = refundItemRepository.findByRefundRequestId(refund.getId());
                for (RefundItem item : refundItems) {
                    if (item.getBook().getId().equals(bookId)) {
                        partialRefundQuantity += item.getRefundQuantity();
                    }
                }
            }
            
            // CASE 2: Ho√†n to√†n ph·∫ßn - kh√¥ng c√≥ RefundRequest, l·∫•y to√†n b·ªô quantity t·ª´ OrderDetail
            if (partialRefundQuantity == 0) {
                // T√¨m OrderDetail c·ªßa s·∫£n ph·∫©m n√†y trong ƒë∆°n h√†ng
                List<OrderDetail> orderDetails = orderDetailRepository.findByOrderId(order.getId());
                for (OrderDetail detail : orderDetails) {
                    if (detail.getBook().getId().equals(bookId)) {
                        partialRefundQuantity = detail.getQuantity(); // Ho√†n to√†n b·ªô s·ªë l∆∞·ª£ng
                        log.info("üîç Order {}, Book {}: Full refund quantity = {} (no RefundRequest found)", 
                                 order.getCode(), bookId, partialRefundQuantity);
                        break;
                    }
                }
            } else {
                log.info("üîç Order {}, Book {}: Partial refund quantity = {} (from RefundRequest)", 
                         order.getCode(), bookId, partialRefundQuantity);
            }
            
            return partialRefundQuantity;
        } catch (Exception e) {
            log.error("‚ùå Error getting actual refund quantity for order {} book {}: {}", 
                      order.getCode(), bookId, e.getMessage(), e);
            return 0;
        }
    }
}
